

./dist/esm/cli/utils/chains.js:import { ethers } from 'ethers';

./dist/esm/common/ens/registration.js:const { ethers } = pkg;
./dist/esm/common/ens/text-record.js:const { ethers } = pkg;
./dist/esm/common/ens/resolution.js:const { ethers } = pkg;
./dist/esm/common/sms/push.js:const { ethers } = pkg;
./dist/esm/common/utils/utils.js:const { ethers } = pkg;
./dist/esm/common/utils/providers.js:const { ethers } = pkg;
./src/cli/utils/chains.js:import { ethers } from 'ethers';


./dist/esm/cli/utils/chains.js:import { ethers } from 'ethers';
./dist/esm/cli/utils/chains.js:        ? new ethers.providers.JsonRpcProvider(chainConf.host, {
./dist/esm/cli/utils/chains.js:          ? new ethers.providers.JsonRpcProvider(bridgeConf.host, {
./dist/esm/cli/utils/keystore.js:import { Wallet, utils } from 'ethers';
./dist/esm/cli/utils/fs.js:      etherscan: string().notRequired(),
xxxxx ./dist/esm/common/ens/registration.js:import { Contract, utils } from 'ethers';
xxxxx ./dist/esm/common/ens/text-record.js:import { Contract, utils } from 'ethers';
xxxxx ./dist/esm/common/ens/resolution.js:import { Contract, utils } from 'ethers';
xxxxx ./dist/esm/common/sms/push.js:import { utils } from 'ethers';
./dist/esm/common/types.d.ts: * [ethers default provider](https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider) options
./dist/esm/common/types.d.ts:   * [Etherscan](https://etherscan.io/) API key
./dist/esm/common/types.d.ts:  etherscan?: string;
./dist/esm/common/utils/sig-utils.js:import { utils } from 'ethers';
./dist/esm/common/utils/sig-utils.js:    // https://docs.ethers.io/v5/api/utils/hashing/#TypedDataEncoder
./dist/esm/common/utils/signers.js:  providers as ethersProviders,
./dist/esm/common/utils/signers.js:} from 'ethers';
./dist/esm/common/utils/signers.js:const { Web3Provider } = ethersProviders;
./dist/esm/common/utils/signers.js:    // https://docs.ethers.io/v5/api/signer/#Signer-signTypedData
./dist/esm/common/utils/api-utils.js:        // https://docs.ethers.io/v5/api/signer/#Signer-signTypedData


./dist/esm/common/utils/IExecContractsClient.d.ts:import { Provider } from '@ethersproject/abstract-provider';
./dist/esm/common/utils/IExecContractsClient.d.ts:import { Signer } from '@ethersproject/abstract-signer';
./dist/esm/common/utils/IExecContractsClient.d.ts:import { Contract } from '@ethersproject/contracts';
./dist/esm/common/utils/IExecContractsClient.d.ts:     * ethers Provider
./dist/esm/common/utils/IExecContractsClient.d.ts:     * ethers Signer, required to sign transactions and messages
./dist/esm/common/utils/encryption-utils.js:import { utils } from 'ethers';
./dist/esm/common/utils/validator.js:import { utils } from 'ethers';
./dist/esm/common/utils/utils.js:import pkg from 'ethers';
./dist/esm/common/utils/utils.js:const { ethers } = pkg;
./dist/esm/common/utils/utils.js://import { utils, BigNumber } from 'ethers';
./dist/esm/common/utils/utils.js:  !!(obj._ethersType && obj._ethersType === 'BigNumber');
./dist/esm/common/utils/utils.js:export const ethersBnToBn = (ethersBn) => new BN(ethersBn.toString());
./dist/esm/common/utils/utils.js:    return ethersBnToBn(parseUnits(amount, pow));
./dist/esm/common/utils/utils.js:    return ethersBnToBn(parseUnits(amount, unit === 'eth' ? 'ether' : unit));
./dist/esm/common/utils/utils.js:      objOut[k] = ethersBnToBn(v);
./dist/esm/common/utils/IExecContractsClient.js:import { Contract } from 'ethers';
./dist/esm/common/utils/providers.js:import pkg from 'ethers';
./dist/esm/common/utils/providers.js:const { ethers } = pkg;
./dist/esm/common/utils/providers.js:const getDefaultProvider = ethers.getDefaultProvider ; 
./dist/esm/common/utils/providers.js:const providers = ethers.providers ; 
./dist/esm/common/utils/providers.js://import { getDefaultProvider, providers } from 'ethers';
./dist/esm/common/utils/providers.js:  const apiProvidersList = ['etherscan', 'infura', 'alchemy', 'pocket', 'ankr'];
./dist/esm/common/utils/signers.d.ts:import { BlockTag, Provider } from '@ethersproject/abstract-provider';
./dist/esm/common/utils/signers.d.ts:import { Wallet } from '@ethersproject/wallet';
./dist/esm/common/utils/signers.d.ts:import { BytesLike } from '@ethersproject/bytes';
./dist/esm/common/utils/signers.d.ts:} from '@ethersproject/abstract-signer';
./dist/esm/common/utils/signers.d.ts:import { SigningKey } from '@ethersproject/signing-key';
./dist/esm/common/protocol/configuration.js:import { ethersBnToBn } from '../utils/utils.js';
./dist/esm/common/protocol/configuration.js:    return ethersBnToBn(
./dist/esm/common/protocol/category.js:  ethersBnToBn,
./dist/esm/common/protocol/category.js:    return ethersBnToBn(
./dist/esm/common/protocol/registries.js:  ethersBnToBn,
./dist/esm/common/protocol/registries.js:      return ethersBnToBn(objCount);
./dist/esm/common/execution/deal.js:import { utils } from 'ethers';
./dist/esm/common/execution/deal.js:import { ethersBnToBn, BN, checkSigner } from '../utils/utils.js';
./dist/esm/common/execution/deal.js:    const blockGasLimit = ethersBnToBn(lastBlock.gasLimit);
./dist/esm/common/wallet/send.js:import { BigNumber } from 'ethers';
./dist/esm/common/wallet/send.js:  ethersBnToBn,
./dist/esm/common/wallet/send.js:        ? ethersBnToBn(BigNumber.from(contracts.txOptions.gasPrice))
./dist/esm/common/wallet/send.js:        : ethersBnToBn(await contracts.provider.getGasPrice());
./dist/esm/common/wallet/bridge.js:import { Contract } from 'ethers';

./dist/esm/common/wallet/bridge.js:              truncateBnWeiToBnNRlc(ethersBnToBn(dailyLimit)),
./dist/esm/common/wallet/balance.js:import { ethersBnToBn, truncateBnWeiToBnNRlc } from '../utils/utils.js';
./dist/esm/common/wallet/balance.js:    return truncateBnWeiToBnNRlc(ethersBnToBn(weiBalance));
./dist/esm/common/wallet/balance.js:  return ethersBnToBn(nRlcBalance);
./dist/esm/common/wallet/balance.js:  return ethersBnToBn(weiBalance);
./dist/esm/common/market/order.js:  ethersBnToBn,
./dist/esm/common/market/order.js:    const consumed = ethersBnToBn(cons);
./dist/esm/common/market/order.js:    // https://docs.ethers.io/v5/api/signer/#Signer-signTypedData
./dist/esm/common/market/order.js:    return { dealid, volume: ethersBnToBn(volume), txHash: tx.hash };
./dist/esm/common/account/balance.js:import { ethersBnToBn } from '../utils/utils.js';
./dist/esm/common/account/balance.js:      stake: ethersBnToBn(stake),
./dist/esm/common/account/balance.js:      locked: ethersBnToBn(locked),
./dist/esm/lib/IExecConfig.d.ts:import { ExternalProvider } from '@ethersproject/providers';
./dist/esm/lib/IExecConfig.d.ts:   * [ethers default provider](https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider) options
./dist/esm/lib/utils.d.ts:import { BlockTag } from '@ethersproject/abstract-provider';
./dist/esm/lib/IExecConfig.js:import { providers } from 'ethers';
./package.json:    "ethers": "^5.7.2",
./src/cli/utils/chains.js:import { ethers } from 'ethers';
./src/cli/utils/chains.js:        ? new ethers.providers.JsonRpcProvider(chainConf.host, {
./src/cli/utils/chains.js:          ? new ethers.providers.JsonRpcProvider(bridgeConf.host, {
./src/cli/utils/keystore.js:import { Wallet, utils } from 'ethers';
./src/cli/utils/fs.js:      etherscan: string().notRequired(),
./src/common/ens/registration.js:import { Contract, utils } from 'ethers';
./src/common/ens/text-record.js:import { Contract, utils } from 'ethers';
./src/common/ens/resolution.js:import { Contract, utils } from 'ethers';
./src/common/sms/push.js:import { utils } from 'ethers';
./src/common/types.d.ts: * [ethers default provider](https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider) options
./src/common/types.d.ts:   * [Etherscan](https://etherscan.io/) API key
./src/common/types.d.ts:  etherscan?: string;
./src/common/utils/sig-utils.js:import { utils } from 'ethers';
./src/common/utils/sig-utils.js:    // https://docs.ethers.io/v5/api/utils/hashing/#TypedDataEncoder
./src/common/utils/signers.js:  providers as ethersProviders,
./src/common/utils/signers.js:} from 'ethers';
./src/common/utils/signers.js:const { Web3Provider } = ethersProviders;
./src/common/utils/signers.js:    // https://docs.ethers.io/v5/api/signer/#Signer-signTypedData
./src/common/utils/api-utils.js:        // https://docs.ethers.io/v5/api/signer/#Signer-signTypedData
./src/common/utils/IExecContractsClient.d.ts:import { Provider } from '@ethersproject/abstract-provider';
./src/common/utils/IExecContractsClient.d.ts:import { Signer } from '@ethersproject/abstract-signer';
./src/common/utils/IExecContractsClient.d.ts:import { Contract } from '@ethersproject/contracts';
./src/common/utils/IExecContractsClient.d.ts:     * ethers Provider
./src/common/utils/IExecContractsClient.d.ts:     * ethers Signer, required to sign transactions and messages
./src/common/utils/encryption-utils.js:import { utils } from 'ethers';
./src/common/utils/validator.js:import { utils } from 'ethers';
./src/common/utils/utils.js:import { utils, BigNumber } from 'ethers';
./src/common/utils/utils.js:  !!(obj._ethersType && obj._ethersType === 'BigNumber');
./src/common/utils/utils.js:export const ethersBnToBn = (ethersBn) => new BN(ethersBn.toString());
./src/common/utils/utils.js:    return ethersBnToBn(parseUnits(amount, pow));
./src/common/utils/utils.js:    return ethersBnToBn(parseUnits(amount, unit === 'eth' ? 'ether' : unit));
./src/common/utils/utils.js:      objOut[k] = ethersBnToBn(v);
./src/common/utils/IExecContractsClient.js:import { Contract } from 'ethers';
./src/common/utils/providers.js:import { getDefaultProvider, providers } from 'ethers';
./src/common/utils/providers.js:  const apiProvidersList = ['etherscan', 'infura', 'alchemy', 'pocket', 'ankr'];
./src/common/utils/signers.d.ts:import { BlockTag, Provider } from '@ethersproject/abstract-provider';
./src/common/utils/signers.d.ts:import { Wallet } from '@ethersproject/wallet';
./src/common/utils/signers.d.ts:import { BytesLike } from '@ethersproject/bytes';
./src/common/utils/signers.d.ts:} from '@ethersproject/abstract-signer';
./src/common/utils/signers.d.ts:import { SigningKey } from '@ethersproject/signing-key';
./src/common/protocol/configuration.js:import { ethersBnToBn } from '../utils/utils.js';
./src/common/protocol/configuration.js:    return ethersBnToBn(
./src/common/protocol/category.js:  ethersBnToBn,
./src/common/protocol/category.js:    return ethersBnToBn(
./src/common/protocol/registries.js:  ethersBnToBn,
./src/common/protocol/registries.js:      return ethersBnToBn(objCount);
./src/common/execution/deal.js:import { utils } from 'ethers';
./src/common/execution/deal.js:import { ethersBnToBn, BN, checkSigner } from '../utils/utils.js';
./src/common/execution/deal.js:    const blockGasLimit = ethersBnToBn(lastBlock.gasLimit);
./src/common/wallet/send.js:import { BigNumber } from 'ethers';
./src/common/wallet/send.js:  ethersBnToBn,
./src/common/wallet/send.js:        ? ethersBnToBn(BigNumber.from(contracts.txOptions.gasPrice))
./src/common/wallet/send.js:        : ethersBnToBn(await contracts.provider.getGasPrice());
./src/common/wallet/bridge.js:import { Contract } from 'ethers';
./src/common/wallet/bridge.js:  ethersBnToBn,
./src/common/wallet/bridge.js:          minPerTx: ethersBnToBn(minPerTx),
./src/common/wallet/bridge.js:          maxPerTx: ethersBnToBn(maxPerTx),
./src/common/wallet/bridge.js:          dailyLimit: ethersBnToBn(dailyLimit),
./src/common/wallet/bridge.js:        if (new BN(vAmount).lt(ethersBnToBn(minPerTx))) {
./src/common/wallet/bridge.js:        if (new BN(vAmount).gt(ethersBnToBn(maxPerTx))) {
./src/common/wallet/bridge.js:                ethersBnToBn(parsedLog.args.value),
./src/common/wallet/bridge.js:        const withinLimit = totalSpentPerDay.lt(ethersBnToBn(dailyLimit));
./src/common/wallet/bridge.js:          minPerTx: ethersBnToBn(minPerTx),
./src/common/wallet/bridge.js:          maxPerTx: ethersBnToBn(maxPerTx),
./src/common/wallet/bridge.js:          dailyLimit: ethersBnToBn(dailyLimit),
./src/common/wallet/bridge.js:        if (bnWeiValue.lt(ethersBnToBn(minPerTx))) {
./src/common/wallet/bridge.js:              truncateBnWeiToBnNRlc(ethersBnToBn(minPerTx)),
./src/common/wallet/bridge.js:        if (bnWeiValue.gt(ethersBnToBn(maxPerTx))) {
./src/common/wallet/bridge.js:              truncateBnWeiToBnNRlc(ethersBnToBn(maxPerTx)),
./src/common/wallet/bridge.js:          totalSpentPerDay: ethersBnToBn(totalSpentPerDay),
./src/common/wallet/bridge.js:              truncateBnWeiToBnNRlc(ethersBnToBn(totalSpentPerDay)),
./src/common/wallet/bridge.js:              truncateBnWeiToBnNRlc(ethersBnToBn(dailyLimit)),
./src/common/wallet/balance.js:import { ethersBnToBn, truncateBnWeiToBnNRlc } from '../utils/utils.js';
./src/common/wallet/balance.js:    return truncateBnWeiToBnNRlc(ethersBnToBn(weiBalance));
./src/common/wallet/balance.js:  return ethersBnToBn(nRlcBalance);
./src/common/wallet/balance.js:  return ethersBnToBn(weiBalance);
./src/common/market/order.js:  ethersBnToBn,
./src/common/market/order.js:    const consumed = ethersBnToBn(cons);
./src/common/market/order.js:    // https://docs.ethers.io/v5/api/signer/#Signer-signTypedData
./src/common/market/order.js:    return { dealid, volume: ethersBnToBn(volume), txHash: tx.hash };
./src/common/account/balance.js:import { ethersBnToBn } from '../utils/utils.js';
./src/common/account/balance.js:      stake: ethersBnToBn(stake),
./src/common/account/balance.js:      locked: ethersBnToBn(locked),
./src/lib/IExecConfig.d.ts:import { ExternalProvider } from '@ethersproject/providers';
./src/lib/IExecConfig.d.ts:   * [ethers default provider](https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider) options
./src/lib/utils.d.ts:import { BlockTag } from '@ethersproject/abstract-provider';
./src/lib/IExecConfig.js:import { providers } from 'ethers';